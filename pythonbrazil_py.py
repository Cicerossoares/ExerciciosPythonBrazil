# -*- coding: utf-8 -*-
"""PythonBrazil.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I_wMv9P3g_nohA_bWcugiZZx_Ct6tmtt
"""
  

numero = 329

centenas_str = dezenas_str = unidades_str = ''

centenas_int, numero = divmod(numero, 100)

partes_numericas =0

if centenas_int == 1:
  centenas_str = '1 centena'
elif centenas_int > 1:
  centenas_str = f'{centenas_int} centenas'
  
  
  dezenas_int, numero = divmod(numero, 10)

if dezenas_int == 1:
  dezenas_str = '1 dezena'
elif dezenas_int > 1:
  dezenas_str = f'{dezenas_int} dezenas'


if numero == 1:
  unidades_str = '1 unidade'
elif numero > 1:
  unidades_str = f'{numero} unidades'

partes_numericas == 0
print()


print(centenas_str, dezenas_str, unidades_str)

"""EXERCICIO

"""

pop_a = int(input('Digite Populaçao de A : '))
pop_b = int(input('Digite Populaçao de B : '))
taxa_de_crescimento_a = 1.03
taxa_de_crescimento_b = 1.015
anos = 0

while pop_a < pop_b:
  #print(f'######## Populaçao no Ano {anos}')
  #print(f'Populaçao A {pop_a}')
  #print(f'Populaçao B {pop_b}')
  anos += 1

  pop_a = int(pop_a * taxa_de_crescimento_a)
  pop_b *= taxa_de_crescimento_b
  pop_b = int(pop_b)

print(f'######## Populaçao no Ano : {anos}')
print(f'Populaçao A : {pop_a}')
print(f'Populaçao B : {pop_b}')

"""EXERCICIO"""

maximo = float(input('Digite o Valor : '))

for _ in range(2):
  maximo = max(maximo, float(input('Digite o Valor : ')))
  print(f'Numero maximo encontrado ate agora : {maximo}')

"""EXERCICIO"""

soma = float(input('Digite o Valor : '))

for n in range(2, 6):
  soma += float(input('Digite o Valor : '))
  media = soma / n

  print(f'A soma dos número é : {soma} a media é : {media}')

"""Exercicio"""

lista = []
for _ in range(3):
   numero = int(input('Digite um numero : '))
   lista.append(numero)
print(f'Números adicionados a atualmente {lista}')

"""Exercicio"""

lista = []
for _ in range(10):
   numero = int(input('Digite um numero : '))
   lista.append(numero)
lista.reverse()
print(f'Números adicionados a atualmente {lista}')

"""EXERCICIO !"""

notas = []

while True:
  entrada = input('Digite um numero : ')
  if entrada == '-1':
   break
  notas.append(float(entrada))


tamanho = len(notas)
print(f'Total de notas {tamanho}')
print(' '.join ([str(nota) for nota in notas]))
notas.reverse()

for nota in notas:
  print(nota)

soma = sum(notas)
print(f'A soma das notas é : {soma}') 

media = soma / tamanho
print(f'A media é : {media}')

print('Notas acima da media: ')

print(' '.join ([str(nota) for nota in notas if nota > media ]))

print('Notas abaixo da media: ')

print(' '.join ([str(nota) for nota in notas if nota < media ]))

print('FINALIZADO PROGRAMA DE ESTATISTICA DE NOTAS.')

"""Exercicio

# `Utilize uma lista para resolver o problema a seguir. Uma empresa paga seus vendedores com base em comissões. O vendedor recebe $200 por semana mais 9 por cento de suas vendas brutas daquela semana. Por exemplo, um vendedor que teve vendas brutas de $3000 em uma semana recebe $200 mais 9 por cento de $3000, ou seja, um total de $470. Escreva um programa (usando um array de contadores) que determine quantos vendedores receberam salários nos seguintes intervalos de valores:`
$200 - $299
$300 - $399
$400 - $499
$500 - $599
$600 - $699
$700 - $799
$800 - $899
$900 - $999
$1000 em diante

```
# Isto está formatado como código
```


# Desafio: Crie ma fórmula para chegar na posição da lista a partir do salário, sem fazer vários ifs aninhados.
"""

salarios = [200, 250, 350, 477, 530, 620, 764, 810, 999, 1000, 2000, 3000]
contagem_faixa_salario = [0] * 9
for salario in salarios:
  indice = salario // 100 -2
  indice_maximo = len(contagem_faixa_salario) -1
  indice = min(indice, indice_maximo)
  contagem_faixa_salario[indice] += 1

print(contagem_faixa_salario)

"""exercicio

Faça um programa para imprimir:



    1
    2   2
    3   3   3
    .....
    n   n   n   n   n   n  ... n
para um n informado pelo usuário. Use uma função que receba um valor n inteiro e imprima até a n-ésima linha.

```
# Isto está formatado como código
```


"""

n = int = 5
def imprimir_triangunlo_numeros(n: int):
  for i in range(1, n + 1):
    for _ in range(i):
     print(i, end= '   ')
    print('')  


#print('Triangulo com 1')   
#imprimir_triangunlo_numeros(1)
#print('Triangulo com 2')   
#imprimir_triangunlo_numeros(2)
#print('Triangulo com 3')   
#imprimir_triangunlo_numeros(3)

print(f'Triangulo com {n}')   

imprimir_triangunlo_numeros(n)

print('Exercicio concluido')

"""Exercicio

Faça um programa para imprimir:


    1
    1   2
    1   2   3
    .....
    1   2   3   ...  n
para um n informado pelo usuário. Use uma função que receba um valor n inteiro imprima até a n-ésima linha.










"""

def imprimir_triangunlo_numeros_crescentes(n: int):
  for linha in range(1, n + 1):
    for coluna in range(1, linha + 1):
     print(coluna, end= '   ')
    print('')  


print('Triangulo com 1')   
imprimir_triangunlo_numeros_crescentes(1)
print('Triangulo com 2')   
imprimir_triangunlo_numeros_crescentes(2)
print('Triangulo com 3')   
imprimir_triangunlo_numeros_crescentes(3)

"""Exercicio

Tamanho de strings. Faça um programa que leia 2 strings e informe o conteúdo delas seguido do seu comprimento. Informe também se as duas strings possuem o mesmo comprimento e são iguais ou diferentes no conteúdo.

Compara duas strings

String 1: Brasil Hexa 2006

String 2: Brasil! Hexa 2006!

Tamanho de "Brasil Hexa 2006": 16 caracteres

Tamanho de "Brasil! Hexa 2006!": 18 caracteres

 As duas strings são de tamanhos diferentes.

As duas strings possuem conteúdo diferente.
"""

s1 = input('Digite uma string: ')
s2 = input('Digite outra string: ')
tamanho1 = len(s1)
tamanho2 = len(s2)

print(f'"{s1}" : {tamanho1}')
print(f'"{s2}" : {tamanho2}')

comparaçao_de_tamanhos = 'diferentes'
comparaçao_de_conteudo = 'diferente'

if s1 == s2:
  comparaçao_de_tamanhos = 'iguais'
  comparaçao_de_conteudo = 'igual'

elif tamanho1 == tamanho2:
  comparaçao_de_tamanhos = 'iguais'  

print(f'As duas strings são de tamanhos {comparaçao_de_tamanhos}.')
print(f'As duas strings possuem conteúdo {comparaçao_de_conteudo}.')

"""Exercicio

Nome ao contrário em maiúsculas. Faça um programa que permita ao usuário digitar o seu nome e em seguida mostre o nome do usuário de trás para frente utilizando somente letras maiúsculas. Dica: lembre−se que ao informar o nome o usuário pode digitar letras maiúsculas ou minúsculas.
"""

nome = input('Digite seu nome : ')
nome.upper()

nome_invertido_por_letras = ''.join(reversed(nome))
nome_invertido_por_letras.upper()

nome_invertido_por_palavras = ' '.join(reversed(nome.split()))

print(f'Nome ao contrario em maiusculo {nome.upper()}')
print(f'Nome ao contrario em letras maiusculas {nome_invertido_por_letras.upper()}')
print(f'Nome ao contrario por palavras em maiusculas {nome_invertido_por_palavras.upper()}')

"""Exercicio

Jogo de Forca. Desenvolva um jogo da forca. O programa terá uma lista de palavras lidas de um arquivo texto e escolherá uma aleatoriamente. O jogador poderá errar 6 vezes antes de ser enforcado.

Digite uma letra: A

-> Você errou pela 1ª vez. Tente de novo!

Digite uma letra: O

A palavra é: _ _ _ _ O

Digite uma letra: E

A palavra é: _ E _ _ O

Digite uma letra: S

-> Você errou pela 2ª vez. Tente de novo!
"""

palavra = 'devpro'.upper()

print('Jogo da Forca')
print('Descubra a palavra')

print('A palavra é: ', end='')
for letra in palavra:
  print(f'_ ', end='')

conjunto_letras_palavras = set (palavra)  
conjunto_letras_digitadas = set ()
erros=0

while not (conjunto_letras_palavras.issubset(conjunto_letras_digitadas)) and erros < 7:
  print()
  print()
  letra_digitada = input('Digite uma letra : ').upper()
  conjunto_letras_digitadas.add(letra_digitada)
  if letra_digitada in conjunto_letras_palavras:
    print('A palavra é: ', end='')
    for letra in palavra:
       if letra in conjunto_letras_digitadas:
        print(f'{letra} ', end='')
       else:
        print (f'_ ', end='')
  else:
    erros += 1
    print(f' Erros {erros} de 7. Tente denovo !')


  print()
  print('Letras ja digitadas : ', conjunto_letras_digitadas)
    
if erros < 7:
      print('Voce conseguiu Parabéns !') 
else:
      print('Infelizmente voce perdeu !')

"""Teste :"""

nome = input('Digite seu nome : ').upper()
print(f'Aqui está seu nome : {nome}')

"""Exercicio 

Nome na vertical em escada invertida. Altere o programa anterior de modo que a escada seja invertida.

FULANO

FULAN

FULA

FUL

FU

F

"""

s = 'FULANO'
while s != '':
 print(s)
 s = s[:-1]

"""exercicio

Faça um programa que leia um arquivo texto contendo uma lista de endereços IP e gere um outro arquivo, contendo um relatório dos endereços IP válidos e inválidos.
O arquivo de entrada possui o seguinte formato:

200.135.80.9

192.168.1.1

8.35.67.74

257.32.4.5

85.345.1.2

1.2.3.4

9.8.234.5

192.168.0.256
"""

def validar(ip:str) ->bool:
  numeros = ip.split('.')
  if len(numeros) != 4:
   return False
  for n in numeros:
    if not(0 <= int(n) <=255):
     return False
  return True

ips_validos = []
ips_invalidos = []

with open('sample_data/ips.txt', 'r') as arquivo:
  for linha in arquivo:
    ip = linha.strip()
    if validar(ip):
      ips_validos.append(ip)
    else:
      ips_invalidos.append(ip) 

with open('sample_data/ips.saida.txt', 'w') as arquivo:
  arquivo.writelines('[Endereços válidos:]\n')

  for ip in ips_validos:
    arquivo.writelines(f'{ip}\n')

  arquivo.writelines('\n')
  arquivo.writelines('\n')
  arquivo.writelines('[Endereços inválidos:]\n')  


  for ip in ips_invalidos:
    arquivo.writelines(f'{ip}\n')

"""Exercicio

A ACME Inc., uma empresa de 500 funcionários, está tendo problemas de espaço em disco no seu servidor de arquivos. Para tentar resolver este problema, o Administrador de Rede precisa saber qual o espaço ocupado pelos usuários, e identificar os usuários com maior espaço ocupado. Através de um programa, baixado da Internet, ele conseguiu gerar o seguinte arquivo, chamado "usuarios.txt":

alexandre       456123789

anderson        1245698456

antonio         123456456

carlos          91257581

cesar           987458

rosemary        789456125

Neste arquivo, o nome do usuário possui 15 caracteres. A partir deste arquivo, você deve criar um programa que gere um relatório, chamado "relatório.txt", no seguinte formato:


ACME Inc.               Uso do espaço em disco pelos usuários
------------------------------------------------------------------------
Nr.  Usuário        Espaço utilizado     % do uso


1    alexandre       434,99 MB             16,85%

2    anderson       1187,99 MB             46,02%

3    antonio         117,73 MB              4,56%

4    carlos           87,03 MB              3,37%

5    cesar             0,94 MB              0,04%

6    rosemary        752,88 MB             29,16%


Espaço total ocupado: 2581,57 MB

Espaço médio ocupado: 430,26 MB

"""

lista_de_dados =[]


def transformar_em_megabytes(tamanho_em_bytes:str) -> float:
  return int(tamanho_em_bytes)/ (2**10) **2

  
with open('sample_data/usuarios.txt', 'r') as arquivo:
  for linha in arquivo:
    linha = linha.strip()
    usuario = linha[:15]
    tamanho_em_disco = transformar_em_megabytes(linha[16:])
    lista_de_dados.append((usuario, tamanho_em_disco))


cabecalho ='''ACME Inc.               Uso do espaço em disco pelos usuários
------------------------------------------------------------------------
Nr.    Usuário      Espaço utilizado       % do uso
'''  

with open('sample_data/relatorio.txt', 'w') as arquivo:
  tamanho_total_consumido = sum([tamanho for _, tamanho in lista_de_dados])
  media = tamanho_total_consumido / len(lista_de_dados)
  arquivo.writelines(cabecalho)
  for indice, dados in enumerate(lista_de_dados, start=1):
    usuario, tamanho_em_disco = dados
    arquivo.writelines(
        f'{indice:<4} {usuario} {tamanho_em_disco:9.2f} MB           '          
        f'{tamanho_em_disco/tamanho_total_consumido:>6.2%} \n'
        ) 
  arquivo.writelines('\n')
  arquivo.writelines(f'Espaço total ocupado: {tamanho_total_consumido:.2f}\n')
  arquivo.writelines(f'Espaço médio ocupado: {media:.2f}')

"""exercicio class

Classe Bola: Crie uma classe que modele uma bola:

a-Atributos: Cor, circunferência, material

b-Métodos: trocaCor e mostraCor
"""

class CirculoPerfeito:
  def __init__(self):
    self.cor = 'Azul'
    self.circunferencia = 4
    self.material = 'Papel'

  def mostra_cor(self):
      return self.cor

  def troca_cor(self, cor):
      self.cor = cor


circulo_primeiro = CirculoPerfeito()
circulo_segundo = CirculoPerfeito()  
circulo_segundo.troca_cor = ('Amarelo')
print(type(circulo_primeiro))
print(circulo_primeiro is circulo_segundo)
print(id(circulo_primeiro), circulo_primeiro.mostra_cor())
print(id(circulo_segundo), circulo_segundo.mostra_cor())

print(circulo_primeiro.cor, circulo_segundo.cor)

"""Classe Quadrado: Crie uma classe que modele um quadrado:

a-Atributos: Tamanho do lado

b-Métodos: Mudar valor do Lado, Retornar valor do Lado e calcular Área;
"""

class Quadrado:
  def __init__(self, lado = 1):
    self.lado = lado

  def calcular_area(self):
    return self.lado ** 2


quadrado = Quadrado()
print(quadrado.lado, quadrado.calcular_area(4))

"""EXERCICIO
Crie uma classe que modele uma pessoa:

Atributos: nome, idade, peso e altura
Métodos: Envelhercer, engordar, emagrecer, crescer. Obs: Por padrão, a cada ano que nossa pessoa envelhece, sendo a idade dela menor que 21 anos, ela deve crescer 0,5 cm.
"""

class Pessoa:
  def __init__(self, nome, idade, peso, altura):
    self.nome = nome
    self.idade = idade
    self.peso = peso
    self.altura = altura

  def envelhecer(self):
    if self.idade < 21:
      self.altura += 0.5
      self.idade += 1


otavio = Pessoa('otavio', 14, 50, 140)
for _ in range(10):
  otavio.envelhecer()
  print(f'A idade de {otavio.nome} é : {otavio.idade} anos, Seu peso é : {otavio.peso} kg, Sua altura é : {otavio.altura} cm.')

"""Classe Bomba de Combustível: Faça um programa completo utilizando classes e métodos que:

Possua uma classe chamada bombaCombustível, com no mínimo esses atributos:

tipoCombustivel.

valorLitro

quantidadeCombustivel

Possua no mínimo esses métodos:

abastecerPorValor( ) – método onde é informado o valor a ser abastecido e mostra a quantidade de litros que foi colocada no veículo

abastecerPorLitro( ) – método onde é informado a quantidade em litros de combustível e mostra o valor a ser pago pelo cliente.

alterarValor( ) – altera o valor do litro do combustível.

alterarCombustivel( ) – altera o tipo do combustível.

alterarQuantidadeCombustivel( ) – altera a quantidade de combustível restante na bomba.

OBS: Sempre que acontecer um abastecimento é necessário atualizar a quantidade de combustível total na bomba.

"""

class BombaCombustivel:
  def __init__(self, tipo_combustivel:str, valor_litro: float, quantidade_combustivel: float):
    self.valor_litro = valor_litro
    self.tipo_combustivel = tipo_combustivel
    self.quantidade_combustivel = quantidade_combustivel
    

  def abastecer_por_valor(self, valor: float):
    litros_abastecidos = valor / self.valor_litro
    self._apresentar_abastecimento_se_possivel(litros_abastecidos, valor)

  def _apresentar_abastecimento_se_possivel(self, litros_abastecidos:float, valor:float): 
    if litros_abastecidos > self.quantidade_combustivel:
      print(f'Nao foi possivel abastecer faltam :{litros_abastecidos - self.quantidade_combustivel:.2f}') 
      print('Reabasteca a Bomba')
    else:  
     self.quantidade_combustivel -= litros_abastecidos
    print(f'Foram abastecidos {litros_abastecidos:.2f} litros, No valor de R$: {valor:.2f}')
    print(f'Quantidade de litros restantes {self.quantidade_combustivel:.2f} litros de {self.tipo_combustivel}')

  def abastecer_por_litros(self, litros_abastecidos: float):
    valor = litros_abastecidos * self.valor_litro
    self._apresentar_abastecimento_se_possivel(litros_abastecidos, valor)

  def adicionar_gasolina(self, quantidade:float):
    if quantidade >= 0:
     self.quantidade_combustivel += quantidade
     print(f'Bomba reabastecida com o total agora e de : {self.quantidade_combustivel + quantidade:.2f} litros ')
    else:
      print('Nao e possivel fazer esse tipo de alteração.')


bomba = BombaCombustivel('Gasolina', 4.59, 100.0)
bomba.abastecer_por_valor(float(input('Qual valor deseja Abastecer : ')))
bomba.abastecer_por_litros(float(input('Quantos litros deseja Abastecer : ')))
bomba.valor_litro = 5.59
bomba.adicionar_gasolina(float(input('Abastecer a bomba  : ' )))

class Computador:
  def __init__(self, marca, memoria_ram, placa_de_video):
    self.marca = marca
    self.memoria_ram = memoria_ram
    self.placa_de_video = placa_de_video

computador1 = Computador('Asus','8 Ram','Geforce')
computador2 = Computador('Intel', '12 Ram', 'Nvidia')
computador3 = Computador('LG','4 Ram','ATM')  
print(computador1.marca, computador1.memoria_ram, computador1.placa_de_video)
print(computador2.marca, computador2.memoria_ram, computador2.placa_de_video)
print(computador3.marca, computador3.memoria_ram, computador3.placa_de_video)

class Carro:
  def __init__(self, marca, modelo, placa):
    self.marca = marca
    self.modelo = modelo
    self.placa = placa

  def ComprarCarro(self):
    print('Compra do seu Carro efetuada.') 

  def VendaCarro(self):
    print('Venda do seu Carro concluida.')

  def  ExibirInfoCarro(self):
    print(self.marca, self.modelo, self.placa)

carro1 = Carro('Fiat', 'Uno', 'FHG1354') 
carro1.ComprarCarro()
carro1.VendaCarro()
carro1.ExibirInfoCarro()
